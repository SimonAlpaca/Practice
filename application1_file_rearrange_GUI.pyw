# -*- coding: utf-8 -*-

import tkinter as tk
import os
import shutil
import codecs


# In[IO]
def file_rearranger():                                        # modify to definition
    
    file_dir = str(from_entry.get())                          # get entry values from GUI
    to_dir = str(to_entry.get())
    remove_empty = empty_check.get()
    parent_include = parent_check.get()
    begin_number = num_entry.get()

# In[debug]

    result_text.configure(state="normal")                     # enable textbox
    result_text.delete(1.0, tk.END)
    
# check whether the prefix is an integer
    try:
        begin_number = int(begin_number)
    except:
        exception_noprefix()
        
# check whether the number is too big or negative
    if begin_number > 800 or begin_number < 0:
        exception_noprefix()

# check whether the directory exists and has permission:
    try:
        os.listdir(file_dir)  
    except PermissionError:                       
        exception_dirnopermission(file_dir)
    except FileNotFoundError:
        exception_dirnotfound(file_dir) 
    
    try:
        os.listdir(to_dir)  
    except PermissionError:                       
        exception_dirnopermission(to_dir)
    except FileNotFoundError:
        exception_dirnotfound(to_dir) 

# check whether full path length is too long
    file_prewalk = os.walk(file_dir)
    i = begin_number - 2
    for root, dir, files in file_prewalk:                      
        if len(files) != 0:                                 
            i = i + 1 
        for file in files:      
            if root == file_dir and parent_include == False:
                continue
            if root == to_dir:                                      
                continue                            
            from_path = os.path.join(root, file)           
            file_rename = str(i).rjust(3,"0") + "_" + file 
            to_path = to_dir + "\\" + file_rename
            
            if len(from_path) > 255:                          
                exception_pathtoolong(from_path)
            if len(to_path) > 255:
                exception_pathtoolong(to_path)
             
# In[remove empty folder]
        if remove_empty == True:
            for path,_,_ in file_prewalk:                      
                if len(os.listdir(path)) == 0:
                    os.rmdir(path)                             

# In[Create Readme and Rearrange files]

    readme_dir = os.path.join(to_dir, "readme.txt")         
    try:
        create_readme = codecs.open(readme_dir, "a", encoding = "utf-8")            
        create_readme.flush()                                   
        create_readme.write("*** Generated by File Rearranger ***" + "\n")
    except Exception as e:
        create_readme.close()
        exception_readme(e)
    result_text.insert("1.0","*** Loading ***" + "\n")    # insert to GUI textbox
    window.update()                                       # need to update window
    file_walk = os.walk(file_dir)
    i = begin_number - 1
    for root, dir, files in file_walk:
        dir.sort()
        if len(files) != 0:                                 
            if root == file_dir and parent_include == False:
                continue
            if root == to_dir:                                      
                continue
            i = i + 1 
            dir_name = root.split(os.path.sep)[-1]          
            print1 = str(i).rjust(3, "0") + " : " + dir_name
            print(print1)
            result_text.insert(tk.END,print1+"\n")         # insert to GUI textbox
            window.update()                                # need to update window
            try:
                create_readme.write(print1 + "\n")
            except Exception as e:
                create_readme.close()
                exception_readme(e)
        for file in files:   
             if root == file_dir and parent_include == False:
                 continue                  
             if root == to_dir:                             
                 continue
         
             from_path = os.path.join(root, file)           
             file_rename = str(i).rjust(3,"0") + "_" + file 
             to_path = to_dir + "\\" + file_rename
             shutil.copy(from_path, to_path)                

    create_readme.close()                                 
    print("Finish" + "\n")
    result_text.insert(tk.END, "Finish" + "\n\n")                      # insert to GUI textbox
    result_text.delete("1.0","1.20")                        # delete the first row of textbox
    result_text.configure(state="disabled")
    
# In[Exception]

def exception_dirnotfound(dir_path):
    result_text.insert(tk.END, "FileNotFoundError : No such directory \n (" + dir_path + ") \n")
    result_text.configure(state="disabled")                  
    raise FileNotFoundError("No such directory :" + dir_path)

def exception_dirnopermission(dir_path):
    result_text.insert(tk.END, "PermissionError : No permission \n (" + dir_path + ") \n")
    result_text.configure(state="disabled")                  
    raise PermissionError("Directory no permission :" + dir_path)
    
def exception_pathtoolong(file_path):
    result_text.insert(tk.END, "FileNotFoundError : Full path name can't exceed 255 characters \n (" + file_path + ") \n")
    result_text.configure(state="disabled")
    raise FileNotFoundError("Full path name can't exceed 255 characters :" + file_path)

def exception_noprefix():
    result_text.insert(tk.END, "ValueError : Prefix can only be an integer less than 4 digit \n")
    result_text.configure(state="disabled")
    raise ValueError("Prefix can only be an integer less than 4 digit")
    
def exception_readme(e):
    result_text.insert(tk.END, "Error: Readme issue \n" + e + "\n")
    result_text.configure(state="disabled")   
    raise e
    
# In[GUI]

# Window
window = tk.Tk()                                             # create window
window.resizable(width=False,height=False)                   # disallow window resize
window.title("File Rearranger")                              # title
window.geometry('500x550')                                   # window size
window.configure(background="white")                         # background colour

# Textbox
text_frame = tk.Frame(window,background="white")
text_frame.pack()
result_scroll = tk.Scrollbar(text_frame)                     # add scroll bar
result_scroll.pack(side=tk.RIGHT, fill=tk.Y)
result_text = tk.Text(text_frame,background="white", width=65, height=30, yscrollcommand = result_scroll.set) # add textbox
result_text.configure(state="disabled")                      # disable textbox from editing
result_text.pack(side=tk.LEFT)
result_scroll.config(command = result_text.yview)

# Rearrange Folder
from_frame = tk.Frame(window,background="white")             # add frame first
from_frame.pack(pady=10, fill="both")
from_label = tk.Label(from_frame, text = "Rearrange Folder : ",background="white")  # add label
from_label.pack(side=tk.LEFT)
from_entry = tk.Entry(from_frame, width=54)                  # add entry box
from_entry.insert(1, "C:\ProgramData\Anaconda3\Practice")    # default value
from_entry.pack(side=tk.RIGHT)

# Destination Folder
to_frame = tk.Frame(window,background="white")               
to_frame.pack(pady=5, fill="both")                           # pady means gap of y-axis, fill both means aligh to left and right
to_label = tk.Label(to_frame, text = "Destination Folder : " ,background="white")
to_label.pack(side=tk.LEFT)
to_entry = tk.Entry(to_frame, width=54)
to_entry.insert(1, "C:\ProgramData\Anaconda3\Practice")
to_entry.pack()

# Prefix
num_frame = tk.Frame(window,background="white")
num_frame.pack(pady=10)
num_label = tk.Label(num_frame, text = "First Prefix : ",background="white")
num_label.pack(side=tk.LEFT,padx=13)
num_entry = tk.Entry(num_frame, width=5)
num_entry.insert(1, "1")
num_entry.pack(side=tk.LEFT)

# Check Button to remove empty folder
empty_check = tk.BooleanVar()
empty_check.set(False)                            # default value
check_button = tk.Checkbutton(num_frame, text="Remove empty folder", var=empty_check, background="white")
check_button.pack(side=tk.RIGHT, padx = 5)

# Check Button to include parent folder
parent_check = tk.BooleanVar()
parent_check.set(False)                            # default value
check_button = tk.Checkbutton(num_frame, text="Include parent folder", var=parent_check, background="white")
check_button.pack(side=tk.RIGHT, padx = 10)

# Button
button_frame = tk.Frame(window,background="white")
button_frame.pack()
go_button = tk.Button(button_frame, text = "GO", command=file_rearranger,width=10)
go_button.pack(side=tk.LEFT,padx=30)              # padx means gap of x-axis

quit_button = tk.Button(button_frame, text = "Quit", command=window.destroy,width=10) # destroy to quit
quit_button.pack(side=tk.RIGHT,padx=30)

window.mainloop()        # must add at the end to make it run